---
title: "Final Project"
author: "Danielle Jones & Katie Perez"
format:
  html:
    highlight-style: tango
    toc: true
    toc-title: Table of Contents
    toc-depth: 5
    code-fold: true
    codesummary: "Show the code"
syntax: tango
execute: 
  echo: true
  message: false
  warning: false
fig-width: 9
fig-height: 7
bibliography: references.bib
link-citations: true
---
```{r}
#| label: load-packages
#| include: false
#| results: hide
library(here)
library(rio)
library(tidyverse)
library(janitor)
library(ggthemes)
library(gghighlight)
library(tidyr)
library(ggplot2)
```

```{r}
#| label: load-data
#| include: true
#| results: hide
here("data", "Olympic_Swimming_Results_1912to2020.csv")

olyswim <- read_csv(here("data", "Olympic_Swimming_Results_1912to2020.csv")) %>%
  characterize() %>%
  clean_names()
```

# Cleaning/organizing data
```{r}
olyswim <- olyswim %>%
  filter(year >= 1969, year <=2020,
         relay == 0, rank != 0, rank !=4, rank !=5) %>%
  select(-location, -relay) %>%
    group_by(team) %>%
  filter(team == "USA" | team == "CHN" | team == "FRA") %>%
  mutate(distance_in_meters = parse_number(distance_in_meters)) %>%
  mutate(foo = str_replace_all(results, "\\.", ":")) %>%
  separate_wider_delim(foo, ":", names = c("h", "m", "s", "ms"), too_few = "align_end") %>%
  mutate(across(c(h:ms), as.numeric),
         across(c(h:ms), ~as.numeric(ifelse(is.na(.), "0", .))),
         results_sec = case_when(
           s == 0 ~ as.character(ms),
           s!= 0 ~ paste0((h * 360) + (m * 60) + (s), ".", ms)
         ),
         results_sec = as.numeric(results_sec))
```

# Creating gender and stroke dataframe
```{r}
olyswimgenderstroke <- olyswim %>%
  group_by(gender, stroke) %>%
  summarise(mean_time = mean(results_sec))

summarize(olyswimgenderstroke)
```

# Creating wide dataframe
```{r}
olyswim_genderwide <- olyswim %>%
  pivot_wider(
  names_from = gender, 
  values_from = athlete
  )
```

## Attempting to pivot_longer. I didn't see a way to pivot the data we are working with, so I chose to make a subset (small_team_data)and make it messy and then pivot_longer. I have achieved messy, but now I'm having trouble cleaning the mess. Insights and suggestings are welcome.

```{r}
#small_team_data <- olyswim %>% 
  filter( distance_in_meters =="100m"|gender == "women") %>% 
  select(year, stroke, team, rank) 

#wide_data <- pivot_wider(small_team_data, names_from = team, values_from = rank)

#long_data <- pivot_longer(wide_data, cols == "USA"| cols == "ROC", names_to = "time", values_to = "value")
```

## Visualize the data options

### graph 1

Observations: why is there no value for the men's backstroke? Perhaps because it is so small? Do I adjust the y scale to see the backstroke point? Interesting that the men's times are slower in the freestyle and the breaststroke.

```{r}
ggplot(olyswimgenderstroke, aes(gender, mean_time)) +
  geom_point(aes(color = stroke))
```

### graph 2

This graph does not appear to be useful.I was hoping to visualize the number medals each team won each year. If I look at one stroke with one length, this might work. Then the research question could be which of these three teams earned the greatest number of medals each year in the "100m backstroke".

```{r}
ggplot(small_team_data, aes(year, rank)) + 
geom_col(aes(fill = team),
             position = "dodge")
### graph 3
# I would like to visualize using facet wrap for each country. It would be more interesting to have top speed (least time) for each stroke. Will need to select one distance for each stroke. Points for each stroke top time. Include a smooth line to observe an increase or decease in medaling times for each country. I would assume they would all increase.
ggplot(small_team_data, aes(year, body_mass_g)) + 
  geom_point() +
  geom_smooth() +
  facet_wrap(~species)
```

### subseting data to create a visual of USA women.

Potential research question: have the US women increased their speed in the 100m over the years? I think I might need to group by stroke and then select the slowest time to capture the fastest usa female swimmer each year and view the color of line by the different stroke. Also, there are a variety of lengths for each stroke. Consider flitering for only 100m. The problem I see with the graph is that it will gloss over the missing data, the years when the USA women did not place in the top 3.

```{r}


usa_women <- olyswim %>% filter(team == "USA", gender == "Women")

ggplot(usa_women, aes(year, results, color = stroke)) +
  geom_line() 
```

# Gold medals by country
```{r}
gold_country <- olyswim %>%
  filter(rank == 1) %>%
  group_by(team) %>%
  summarise(num_gold_medals = n()) %>%
  arrange(desc(num_gold_medals))

country_colors <- c("USA" = "#2fc558", "CHN" = "#e92b3e", "FRA" = "#2c9bf1")

gold_plot1 <- gold_country %>%
  mutate(team = factor(gold_country$team, 
                            levels = c("USA", "CHN", "FRA"),
                            labels = c("United States", "China", "France"))) %>%
  ggplot(aes(x = team, y = num_gold_medals, fill = team)) + 
  geom_bar(stat = "identity", color = "white", size = 0.5) +
  geom_text(aes(label = num_gold_medals), 
            position = position_stack(vjust = 0.5), 
            color = "white", 
            size = 3) +
  labs(title = "Gold Medals by Country 1972 - 2020",
       subtitle = "Subset by United States, China, and France",
       x = "Country",
       y = "Number of Gold Medals",
       fill = "Country") +
  theme_minimal()

gold_plot1

gold_plot_piechart <- gold_country %>%
  mutate(team = factor(team,
                        levels = c("USA",
                                   "CHN",
                                   "FRA"))) %>%
  ggplot(aes(x = "", y = num_gold_medals, fill = team)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  geom_text(aes(label = num_gold_medals), 
            position = position_stack(vjust = 0.5), 
            color = "white", 
            size = 3) +
  labs(title = "Gold Medals by Country 1972 - 2020",
       subtitle = "Subset by United States, China, and France",
       x = NULL,
       y = NULL,
       fill = "Country") +
  theme_void() +
  theme(legend.position = "left") +
  scale_fill_manual(values = country_colors,
                    breaks = c("USA", "CHN", "FRA"),
                    labels = c("United States", "China", "France"))
gold_plot_piechart
```

# Gold donut plot
```{r}
df_gold_donut <- gold_country 

# Data prep for plot
df_gold_donut$perc <- df_gold_donut$num_gold_medals / sum(df_gold_donut$num_gold_medals)*100
df_gold_donut$ymax <- cumsum(df_gold_donut$perc)
df_gold_donut$ymin <- c(0, head(df_gold_donut$ymax, n=-1))
df_gold_donut$labelPosition <- (df_gold_donut$ymax + df_gold_donut$ymin)/2
df_gold_donut$label <- paste0(df_gold_donut$team, "\n value: ", df_gold_donut$num_gold_medals)

# Actual plot
gold_country_donut <- df_gold_donut %>%
mutate(team = factor(team, 
                            levels = c("USA", "CHN", "FRA"),
                            labels = c("United States", "China", "France")))  %>%
  ggplot(aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = team)) +
  geom_rect() +
  geom_text(x = 5, aes(y = labelPosition, label = label), size = 3) +
  coord_polar(theta = "y") +
  xlim(c(-1, 5)) +
  theme_void() +
  theme(legend.position = "left") +
  labs(
    title = "Gold Medals By Country 1972 - 2020",
    subtitle = "Subset by United States, China, France",
    fill = "Country"
  )

gold_country_donut
```

# Silver medals by country
```{r}
silver_country <- olyswim %>%
  filter(rank == 2)%>%
  group_by(team) %>%
  summarise(num_silver_medals = n()) %>%
  arrange(desc(num_silver_medals))

silver_plot1 <- silver_country %>%
  mutate(team = factor(factor(gold_country$team, 
                            levels = c("USA", "CHN", "FRA"),
                            labels = c("United States", "China", "France")))) %>%
  ggplot(aes(x = team, y = num_silver_medals, fill = team)) + 
  geom_bar(stat = "identity", color = "white", size = 0.5) +
  geom_text(aes(label = num_silver_medals), 
            position = position_stack(vjust = 0.5), 
            color = "white", 
            size = 3) +
  labs(title = "Silver Medals by Country 1972 - 2020",
       subtitle = "Subset by United States, China, and France",
       x = "Country",
       y = "Number of Silver Medals",
       fill = "Country") +
  theme_minimal()
  
silver_plot1

silver_plot_piechart <- silver_country %>%
  mutate(team = factor(gold_country$team, 
                            levels = c("USA", "CHN", "FRA"),
                            labels = c("United States", "China", "France"))) %>%
  ggplot(aes(x = "", y = num_silver_medals, fill = team)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  geom_text(aes(label = num_silver_medals), 
            position = position_stack(vjust = 0.5), 
            color = "white", 
            size = 3) +
  labs(title = "Silver Medals by Country 1972 - 2020",
       subtitle = "Subset by United States, China, and France",
       x = NULL,
       y = NULL,
       fill = "Country") +
  theme_void() +
  theme(legend.position = "left")
silver_plot_piechart
```

# Silver donut chart
```{r}
df_silver_donut <- silver_country 

# Prepping data for plot
df_silver_donut$perc <- df_silver_donut$num_silver_medals / sum(df_silver_donut$num_silver_medals)*100
df_silver_donut$ymax <- cumsum(df_silver_donut$perc)
df_silver_donut$ymin <- c(0, head(df_silver_donut$ymax, n=-1))
df_silver_donut$labelPosition <- (df_silver_donut$ymax + df_silver_donut$ymin)/2
df_silver_donut$label <- paste0(df_silver_donut$team, "\n value: ", df_silver_donut$num_silver_medals)

# Actually making the plot
silver_country_donut <- df_silver_donut %>%
  mutate(team = factor(team, 
                            levels = c("USA", "CHN", "FRA"),
                            labels = c("United States", "China", "France"))) %>%
  ggplot(aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = team)) +
  geom_rect() +
  geom_text(x = 5, aes(y = labelPosition, label = label), size = 3) +
  coord_polar(theta = "y") +
  xlim(c(-1, 5)) +
  theme_void() +
  theme(legend.position = "left") +
  labs(
    title = "Silver Medals By Country 1972 - 2020",
    subtitle = "Subset by United States, China, France",
    fill = "Country"
  )

silver_country_donut
```

# Bronze medals by country
```{r}
bronze_country <- olyswim %>%
  filter(rank == 3)%>%
  group_by(team) %>%
  summarise(num_bronze_medals = n()) %>%
  arrange(desc(num_bronze_medals))

bronze_plot1 <- bronze_country %>%
  mutate(team = factor(bronze_country$team, 
                            levels = c("USA", "CHN", "FRA"),
                            labels = c("United States", "China", "France"))) %>%
  ggplot(aes(x = team, y = num_bronze_medals, fill = team)) + 
  geom_bar(stat = "identity", color = "white", size = 0.5) +
  geom_text(aes(label = num_bronze_medals), 
            position = position_stack(vjust = 0.5), 
            color = "white", 
            size = 3) +
  labs(title = "Bronze Medals by Country 1972 - 2020",
       subtitle = "Subset by United States, China, and France",
       x = "Country",
       y = "Number of Bronze Medals",
       fill = "Country") +
  theme_minimal()

bronze_plot1

bronze_plot_piechart <- bronze_country %>%
  mutate(team = factor(gold_country$team, 
                            levels = c("USA", "CHN", "FRA"),
                            labels = c("United States", "China", "France"))) %>%
  ggplot(aes(x = "", y = num_bronze_medals, fill = team)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +
  geom_text(aes(label = num_bronze_medals), 
            position = position_stack(vjust = 0.5), 
            color = "white", 
            size = 3) +
  labs(title = "Bronze Medals by Country 1972 - 2020",
       subtitle = "Subset by United States, China, and France",
       x = NULL,
       y = NULL,
       fill = "Country") +
  theme_void() +
  theme(legend.position = "left")

bronze_plot_piechart
```

# Bronze donut chart
```{r}
df_bronze_donut <- bronze_country 

# Prepping the data for plot
df_bronze_donut$perc <- df_bronze_donut$num_bronze_medals / sum(df_bronze_donut$num_bronze_medals)*100
df_bronze_donut$ymax <- cumsum(df_bronze_donut$perc)
df_bronze_donut$ymin <- c(0, head(df_bronze_donut$ymax, n=-1))
df_bronze_donut$labelPosition <- (df_bronze_donut$ymax + df_bronze_donut$ymin)/2
df_bronze_donut$label <- paste0(df_bronze_donut$team, "\n value: ", df_bronze_donut$num_bronze_medals)

# Actually making the plot
bronze_country_donut <- df_bronze_donut %>%
  mutate(team = factor(team, 
                            levels = c("USA", "CHN", "FRA"),
                            labels = c("United States", "China", "France"))) %>%
  ggplot(aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = team)) +
  geom_rect() +
  geom_text(x = 5, aes(y = labelPosition, label = label), size = 2.75) +
  coord_polar(theta = "y") +
  xlim(c(-1, 5)) +
  theme_void() +
  theme(legend.position = "left") +
  labs(
    title = "Silver Medals By Country 1972 - 2020",
    subtitle = "Subset by United States, China, France",
    fill = "Country"
  )

bronze_country_donut
```

# Side by Side Bar Chart of Medals
```{r}
agg_medal_data <- gold_country %>%
 left_join(silver_country, join_by(team)) %>%
  left_join(bronze_country, join_by(team))

agg_medal_long <- agg_medal_data %>%
  pivot_longer(
    cols = -team,
    names_to = "medal",
    values_to = "total"
  )

agg_medal_barchart <- agg_medal_long %>%
  mutate(team = factor(team, 
                       levels = c("USA", "CHN", "FRA"),
                       labels = c("United States", "China", "France")),
                      medal = factor(medal, levels = c("num_gold_medals", "num_silver_medals", "num_bronze_medals"),
                        labels = c("Gold", "Silver", "Bronze"))) %>%
  ggplot(aes(team, total, fill = medal)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_text(aes(label = total), 
            position = position_dodge(width = 0.9),
            vjust = -0.5, 
            size = 3) +
  scale_fill_manual(values = c("Gold" = "gold", "Silver" = "gray", "Bronze" = "peru")) +
  labs(title = "Medals Count by Country 1972 - 2020",
       subtitle ="Subset by United States, China, and France",
       x = "Country",
       y = "Number of Medals",
       fill = "Medal Type") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme_minimal()

agg_medal_barchart
```

# Over Time Line Graph of Medals
```{r}
gold_stacked_wide <- olyswim %>%
  group_by(team, year) %>%
  filter(rank == 1) %>%
  summarise(num_gold_medals = n())

silver_stacked_wide <- olyswim %>%
  group_by(team, year) %>%
  filter(rank == 2) %>%
  summarise(num_silver_medals = n())

bronze_stacked_wide <- olyswim %>%
  group_by(team, year) %>%
  filter(rank == 3) %>%
  summarise(num_bronze_medals = n())

agg_stacked_wide <- gold_stacked_wide %>%
  left_join(silver_stacked_wide, join_by(team, year)) %>%
  left_join(bronze_stacked_wide, join_by(team, year)) %>%
  mutate_all(~ ifelse(is.na(.), 0, .))

agg_stacked_long <- agg_stacked_wide %>%
  pivot_longer(
    cols = c(-team, -year),
    names_to = "medal",
    values_to= "total"
  ) %>%
  mutate(medal = recode(medal,
                        "num_gold_medals" = "gold",
                        "num_silver_medals" = "silver",
                        "num_bronze_medals" = "bronze"))

agg_line_medals <-  agg_stacked_long %>%
  mutate(team = factor(team, 
                            levels = c("USA", "CHN", "FRA"),
                            labels = c("United States", "China", "France"))) %>%
  mutate(medal = factor(medal, 
                            levels = c("gold", "silver", "bronze"),
                            labels = c("Gold", "Silver", "Bronze"))) %>%
  ggplot(aes(year, total, color = medal)) +
  geom_point() +
  geom_line() +
  facet_wrap(~ team, scales = "free_y", ncol = 1) +
  labs(
    title = "Number of Medals Over Years by Team",
    subtitle = "Subset by United States, China, and France",
    x = "Year",
    y = "Number of Medals",
    color = "Medal"
  ) +
    theme_minimal() +
  scale_x_continuous(breaks = c(1972, 1976, 1980, 1984, 1988, 1992, 1996, 2000, 2004, 2008, 2012, 2016, 2020),
                   labels = c("1972", "1976", "1980", "1984", "1988", "1992", "1996", "2000", "2004", "2008", "2012", "2016", "2020")) +
  scale_y_continuous(
    limits = c(0, 18),
    breaks = seq(0, 18, by = 2))


agg_line_medals
```






